/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 15.0, "minX": 0.0, "maxY": 2983.0, "series": [{"data": [[0.0, 15.0], [0.1, 21.0], [0.2, 24.0], [0.3, 25.0], [0.4, 26.0], [0.5, 27.0], [0.6, 28.0], [0.7, 29.0], [0.8, 30.0], [0.9, 30.0], [1.0, 31.0], [1.1, 31.0], [1.2, 32.0], [1.3, 33.0], [1.4, 33.0], [1.5, 34.0], [1.6, 34.0], [1.7, 35.0], [1.8, 35.0], [1.9, 35.0], [2.0, 36.0], [2.1, 36.0], [2.2, 37.0], [2.3, 37.0], [2.4, 37.0], [2.5, 38.0], [2.6, 38.0], [2.7, 38.0], [2.8, 39.0], [2.9, 39.0], [3.0, 39.0], [3.1, 39.0], [3.2, 40.0], [3.3, 40.0], [3.4, 40.0], [3.5, 41.0], [3.6, 41.0], [3.7, 41.0], [3.8, 42.0], [3.9, 42.0], [4.0, 42.0], [4.1, 43.0], [4.2, 43.0], [4.3, 43.0], [4.4, 43.0], [4.5, 44.0], [4.6, 44.0], [4.7, 44.0], [4.8, 44.0], [4.9, 45.0], [5.0, 45.0], [5.1, 45.0], [5.2, 46.0], [5.3, 46.0], [5.4, 46.0], [5.5, 46.0], [5.6, 46.0], [5.7, 47.0], [5.8, 47.0], [5.9, 47.0], [6.0, 48.0], [6.1, 48.0], [6.2, 48.0], [6.3, 48.0], [6.4, 48.0], [6.5, 49.0], [6.6, 49.0], [6.7, 49.0], [6.8, 49.0], [6.9, 49.0], [7.0, 50.0], [7.1, 50.0], [7.2, 50.0], [7.3, 50.0], [7.4, 50.0], [7.5, 51.0], [7.6, 51.0], [7.7, 51.0], [7.8, 51.0], [7.9, 51.0], [8.0, 52.0], [8.1, 52.0], [8.2, 52.0], [8.3, 52.0], [8.4, 52.0], [8.5, 53.0], [8.6, 53.0], [8.7, 53.0], [8.8, 53.0], [8.9, 53.0], [9.0, 54.0], [9.1, 54.0], [9.2, 54.0], [9.3, 54.0], [9.4, 54.0], [9.5, 54.0], [9.6, 55.0], [9.7, 55.0], [9.8, 55.0], [9.9, 55.0], [10.0, 55.0], [10.1, 55.0], [10.2, 56.0], [10.3, 56.0], [10.4, 56.0], [10.5, 56.0], [10.6, 56.0], [10.7, 56.0], [10.8, 57.0], [10.9, 57.0], [11.0, 57.0], [11.1, 57.0], [11.2, 57.0], [11.3, 57.0], [11.4, 57.0], [11.5, 58.0], [11.6, 58.0], [11.7, 58.0], [11.8, 58.0], [11.9, 58.0], [12.0, 58.0], [12.1, 59.0], [12.2, 59.0], [12.3, 59.0], [12.4, 59.0], [12.5, 59.0], [12.6, 59.0], [12.7, 60.0], [12.8, 60.0], [12.9, 60.0], [13.0, 60.0], [13.1, 60.0], [13.2, 61.0], [13.3, 61.0], [13.4, 61.0], [13.5, 61.0], [13.6, 61.0], [13.7, 61.0], [13.8, 61.0], [13.9, 61.0], [14.0, 62.0], [14.1, 62.0], [14.2, 62.0], [14.3, 62.0], [14.4, 62.0], [14.5, 62.0], [14.6, 62.0], [14.7, 63.0], [14.8, 63.0], [14.9, 63.0], [15.0, 63.0], [15.1, 63.0], [15.2, 63.0], [15.3, 64.0], [15.4, 64.0], [15.5, 64.0], [15.6, 64.0], [15.7, 64.0], [15.8, 64.0], [15.9, 64.0], [16.0, 65.0], [16.1, 65.0], [16.2, 65.0], [16.3, 65.0], [16.4, 65.0], [16.5, 65.0], [16.6, 65.0], [16.7, 66.0], [16.8, 66.0], [16.9, 66.0], [17.0, 66.0], [17.1, 66.0], [17.2, 66.0], [17.3, 66.0], [17.4, 67.0], [17.5, 67.0], [17.6, 67.0], [17.7, 67.0], [17.8, 67.0], [17.9, 67.0], [18.0, 68.0], [18.1, 68.0], [18.2, 68.0], [18.3, 68.0], [18.4, 68.0], [18.5, 68.0], [18.6, 68.0], [18.7, 69.0], [18.8, 69.0], [18.9, 69.0], [19.0, 69.0], [19.1, 69.0], [19.2, 69.0], [19.3, 70.0], [19.4, 70.0], [19.5, 70.0], [19.6, 70.0], [19.7, 70.0], [19.8, 70.0], [19.9, 70.0], [20.0, 70.0], [20.1, 71.0], [20.2, 71.0], [20.3, 71.0], [20.4, 71.0], [20.5, 71.0], [20.6, 71.0], [20.7, 71.0], [20.8, 72.0], [20.9, 72.0], [21.0, 72.0], [21.1, 72.0], [21.2, 72.0], [21.3, 72.0], [21.4, 72.0], [21.5, 73.0], [21.6, 73.0], [21.7, 73.0], [21.8, 73.0], [21.9, 73.0], [22.0, 73.0], [22.1, 73.0], [22.2, 73.0], [22.3, 74.0], [22.4, 74.0], [22.5, 74.0], [22.6, 74.0], [22.7, 74.0], [22.8, 74.0], [22.9, 74.0], [23.0, 75.0], [23.1, 75.0], [23.2, 75.0], [23.3, 75.0], [23.4, 75.0], [23.5, 75.0], [23.6, 75.0], [23.7, 76.0], [23.8, 76.0], [23.9, 76.0], [24.0, 76.0], [24.1, 76.0], [24.2, 76.0], [24.3, 76.0], [24.4, 76.0], [24.5, 76.0], [24.6, 77.0], [24.7, 77.0], [24.8, 77.0], [24.9, 77.0], [25.0, 77.0], [25.1, 77.0], [25.2, 77.0], [25.3, 77.0], [25.4, 78.0], [25.5, 78.0], [25.6, 78.0], [25.7, 78.0], [25.8, 78.0], [25.9, 78.0], [26.0, 79.0], [26.1, 79.0], [26.2, 79.0], [26.3, 79.0], [26.4, 79.0], [26.5, 79.0], [26.6, 79.0], [26.7, 80.0], [26.8, 80.0], [26.9, 80.0], [27.0, 80.0], [27.1, 80.0], [27.2, 80.0], [27.3, 80.0], [27.4, 80.0], [27.5, 81.0], [27.6, 81.0], [27.7, 81.0], [27.8, 81.0], [27.9, 81.0], [28.0, 81.0], [28.1, 81.0], [28.2, 81.0], [28.3, 82.0], [28.4, 82.0], [28.5, 82.0], [28.6, 82.0], [28.7, 82.0], [28.8, 82.0], [28.9, 83.0], [29.0, 83.0], [29.1, 83.0], [29.2, 83.0], [29.3, 83.0], [29.4, 84.0], [29.5, 84.0], [29.6, 84.0], [29.7, 84.0], [29.8, 84.0], [29.9, 84.0], [30.0, 84.0], [30.1, 84.0], [30.2, 84.0], [30.3, 85.0], [30.4, 85.0], [30.5, 85.0], [30.6, 85.0], [30.7, 85.0], [30.8, 85.0], [30.9, 85.0], [31.0, 86.0], [31.1, 86.0], [31.2, 86.0], [31.3, 86.0], [31.4, 86.0], [31.5, 86.0], [31.6, 86.0], [31.7, 86.0], [31.8, 87.0], [31.9, 87.0], [32.0, 87.0], [32.1, 87.0], [32.2, 87.0], [32.3, 87.0], [32.4, 87.0], [32.5, 87.0], [32.6, 87.0], [32.7, 88.0], [32.8, 88.0], [32.9, 88.0], [33.0, 88.0], [33.1, 88.0], [33.2, 88.0], [33.3, 88.0], [33.4, 89.0], [33.5, 89.0], [33.6, 89.0], [33.7, 89.0], [33.8, 89.0], [33.9, 89.0], [34.0, 89.0], [34.1, 90.0], [34.2, 90.0], [34.3, 90.0], [34.4, 90.0], [34.5, 90.0], [34.6, 90.0], [34.7, 90.0], [34.8, 90.0], [34.9, 90.0], [35.0, 91.0], [35.1, 91.0], [35.2, 91.0], [35.3, 91.0], [35.4, 91.0], [35.5, 91.0], [35.6, 92.0], [35.7, 92.0], [35.8, 92.0], [35.9, 92.0], [36.0, 92.0], [36.1, 92.0], [36.2, 92.0], [36.3, 93.0], [36.4, 93.0], [36.5, 93.0], [36.6, 93.0], [36.7, 93.0], [36.8, 93.0], [36.9, 94.0], [37.0, 94.0], [37.1, 94.0], [37.2, 94.0], [37.3, 94.0], [37.4, 94.0], [37.5, 94.0], [37.6, 94.0], [37.7, 95.0], [37.8, 95.0], [37.9, 95.0], [38.0, 95.0], [38.1, 95.0], [38.2, 95.0], [38.3, 95.0], [38.4, 96.0], [38.5, 96.0], [38.6, 96.0], [38.7, 96.0], [38.8, 96.0], [38.9, 96.0], [39.0, 96.0], [39.1, 97.0], [39.2, 97.0], [39.3, 97.0], [39.4, 97.0], [39.5, 97.0], [39.6, 97.0], [39.7, 97.0], [39.8, 98.0], [39.9, 98.0], [40.0, 98.0], [40.1, 98.0], [40.2, 98.0], [40.3, 98.0], [40.4, 98.0], [40.5, 99.0], [40.6, 99.0], [40.7, 99.0], [40.8, 99.0], [40.9, 99.0], [41.0, 99.0], [41.1, 99.0], [41.2, 100.0], [41.3, 100.0], [41.4, 100.0], [41.5, 100.0], [41.6, 100.0], [41.7, 100.0], [41.8, 100.0], [41.9, 100.0], [42.0, 101.0], [42.1, 101.0], [42.2, 101.0], [42.3, 101.0], [42.4, 101.0], [42.5, 101.0], [42.6, 101.0], [42.7, 102.0], [42.8, 102.0], [42.9, 102.0], [43.0, 102.0], [43.1, 102.0], [43.2, 102.0], [43.3, 103.0], [43.4, 103.0], [43.5, 103.0], [43.6, 103.0], [43.7, 103.0], [43.8, 103.0], [43.9, 104.0], [44.0, 104.0], [44.1, 104.0], [44.2, 104.0], [44.3, 104.0], [44.4, 104.0], [44.5, 105.0], [44.6, 105.0], [44.7, 105.0], [44.8, 105.0], [44.9, 105.0], [45.0, 105.0], [45.1, 105.0], [45.2, 106.0], [45.3, 106.0], [45.4, 106.0], [45.5, 106.0], [45.6, 106.0], [45.7, 106.0], [45.8, 106.0], [45.9, 107.0], [46.0, 107.0], [46.1, 107.0], [46.2, 107.0], [46.3, 107.0], [46.4, 107.0], [46.5, 108.0], [46.6, 108.0], [46.7, 108.0], [46.8, 108.0], [46.9, 108.0], [47.0, 108.0], [47.1, 108.0], [47.2, 108.0], [47.3, 109.0], [47.4, 109.0], [47.5, 109.0], [47.6, 109.0], [47.7, 109.0], [47.8, 109.0], [47.9, 110.0], [48.0, 110.0], [48.1, 110.0], [48.2, 110.0], [48.3, 110.0], [48.4, 110.0], [48.5, 110.0], [48.6, 111.0], [48.7, 111.0], [48.8, 111.0], [48.9, 111.0], [49.0, 111.0], [49.1, 111.0], [49.2, 112.0], [49.3, 112.0], [49.4, 112.0], [49.5, 112.0], [49.6, 112.0], [49.7, 112.0], [49.8, 113.0], [49.9, 113.0], [50.0, 113.0], [50.1, 113.0], [50.2, 113.0], [50.3, 113.0], [50.4, 114.0], [50.5, 114.0], [50.6, 114.0], [50.7, 114.0], [50.8, 114.0], [50.9, 114.0], [51.0, 115.0], [51.1, 115.0], [51.2, 115.0], [51.3, 115.0], [51.4, 115.0], [51.5, 115.0], [51.6, 116.0], [51.7, 116.0], [51.8, 116.0], [51.9, 116.0], [52.0, 116.0], [52.1, 116.0], [52.2, 117.0], [52.3, 117.0], [52.4, 117.0], [52.5, 117.0], [52.6, 117.0], [52.7, 117.0], [52.8, 117.0], [52.9, 118.0], [53.0, 118.0], [53.1, 118.0], [53.2, 118.0], [53.3, 118.0], [53.4, 118.0], [53.5, 119.0], [53.6, 119.0], [53.7, 119.0], [53.8, 119.0], [53.9, 119.0], [54.0, 120.0], [54.1, 120.0], [54.2, 120.0], [54.3, 120.0], [54.4, 121.0], [54.5, 121.0], [54.6, 121.0], [54.7, 121.0], [54.8, 121.0], [54.9, 121.0], [55.0, 121.0], [55.1, 122.0], [55.2, 122.0], [55.3, 122.0], [55.4, 122.0], [55.5, 122.0], [55.6, 123.0], [55.7, 123.0], [55.8, 123.0], [55.9, 123.0], [56.0, 123.0], [56.1, 123.0], [56.2, 124.0], [56.3, 124.0], [56.4, 124.0], [56.5, 124.0], [56.6, 124.0], [56.7, 125.0], [56.8, 125.0], [56.9, 125.0], [57.0, 125.0], [57.1, 125.0], [57.2, 125.0], [57.3, 126.0], [57.4, 126.0], [57.5, 126.0], [57.6, 126.0], [57.7, 126.0], [57.8, 126.0], [57.9, 127.0], [58.0, 127.0], [58.1, 127.0], [58.2, 127.0], [58.3, 127.0], [58.4, 128.0], [58.5, 128.0], [58.6, 128.0], [58.7, 128.0], [58.8, 128.0], [58.9, 129.0], [59.0, 129.0], [59.1, 129.0], [59.2, 129.0], [59.3, 129.0], [59.4, 130.0], [59.5, 130.0], [59.6, 130.0], [59.7, 130.0], [59.8, 130.0], [59.9, 130.0], [60.0, 131.0], [60.1, 131.0], [60.2, 131.0], [60.3, 131.0], [60.4, 131.0], [60.5, 132.0], [60.6, 132.0], [60.7, 132.0], [60.8, 132.0], [60.9, 132.0], [61.0, 133.0], [61.1, 133.0], [61.2, 133.0], [61.3, 133.0], [61.4, 133.0], [61.5, 134.0], [61.6, 134.0], [61.7, 134.0], [61.8, 134.0], [61.9, 135.0], [62.0, 135.0], [62.1, 135.0], [62.2, 135.0], [62.3, 135.0], [62.4, 136.0], [62.5, 136.0], [62.6, 136.0], [62.7, 136.0], [62.8, 136.0], [62.9, 137.0], [63.0, 137.0], [63.1, 137.0], [63.2, 137.0], [63.3, 138.0], [63.4, 138.0], [63.5, 138.0], [63.6, 138.0], [63.7, 138.0], [63.8, 138.0], [63.9, 139.0], [64.0, 139.0], [64.1, 139.0], [64.2, 139.0], [64.3, 140.0], [64.4, 140.0], [64.5, 140.0], [64.6, 140.0], [64.7, 140.0], [64.8, 140.0], [64.9, 141.0], [65.0, 141.0], [65.1, 141.0], [65.2, 141.0], [65.3, 142.0], [65.4, 142.0], [65.5, 142.0], [65.6, 142.0], [65.7, 142.0], [65.8, 143.0], [65.9, 143.0], [66.0, 143.0], [66.1, 144.0], [66.2, 144.0], [66.3, 144.0], [66.4, 144.0], [66.5, 145.0], [66.6, 145.0], [66.7, 145.0], [66.8, 145.0], [66.9, 145.0], [67.0, 146.0], [67.1, 146.0], [67.2, 146.0], [67.3, 147.0], [67.4, 147.0], [67.5, 147.0], [67.6, 147.0], [67.7, 148.0], [67.8, 148.0], [67.9, 148.0], [68.0, 148.0], [68.1, 149.0], [68.2, 149.0], [68.3, 149.0], [68.4, 149.0], [68.5, 150.0], [68.6, 150.0], [68.7, 150.0], [68.8, 150.0], [68.9, 151.0], [69.0, 151.0], [69.1, 151.0], [69.2, 152.0], [69.3, 152.0], [69.4, 152.0], [69.5, 152.0], [69.6, 153.0], [69.7, 153.0], [69.8, 153.0], [69.9, 153.0], [70.0, 153.0], [70.1, 154.0], [70.2, 154.0], [70.3, 154.0], [70.4, 154.0], [70.5, 155.0], [70.6, 155.0], [70.7, 155.0], [70.8, 156.0], [70.9, 156.0], [71.0, 156.0], [71.1, 156.0], [71.2, 157.0], [71.3, 157.0], [71.4, 157.0], [71.5, 157.0], [71.6, 158.0], [71.7, 158.0], [71.8, 158.0], [71.9, 159.0], [72.0, 159.0], [72.1, 159.0], [72.2, 160.0], [72.3, 160.0], [72.4, 160.0], [72.5, 160.0], [72.6, 161.0], [72.7, 161.0], [72.8, 161.0], [72.9, 162.0], [73.0, 162.0], [73.1, 162.0], [73.2, 163.0], [73.3, 163.0], [73.4, 163.0], [73.5, 164.0], [73.6, 164.0], [73.7, 164.0], [73.8, 165.0], [73.9, 165.0], [74.0, 165.0], [74.1, 166.0], [74.2, 166.0], [74.3, 166.0], [74.4, 166.0], [74.5, 167.0], [74.6, 167.0], [74.7, 168.0], [74.8, 168.0], [74.9, 168.0], [75.0, 168.0], [75.1, 169.0], [75.2, 169.0], [75.3, 169.0], [75.4, 169.0], [75.5, 170.0], [75.6, 170.0], [75.7, 170.0], [75.8, 171.0], [75.9, 171.0], [76.0, 171.0], [76.1, 172.0], [76.2, 172.0], [76.3, 173.0], [76.4, 173.0], [76.5, 173.0], [76.6, 174.0], [76.7, 174.0], [76.8, 175.0], [76.9, 175.0], [77.0, 175.0], [77.1, 176.0], [77.2, 176.0], [77.3, 176.0], [77.4, 177.0], [77.5, 177.0], [77.6, 177.0], [77.7, 178.0], [77.8, 178.0], [77.9, 178.0], [78.0, 179.0], [78.1, 179.0], [78.2, 179.0], [78.3, 180.0], [78.4, 180.0], [78.5, 180.0], [78.6, 181.0], [78.7, 181.0], [78.8, 181.0], [78.9, 182.0], [79.0, 182.0], [79.1, 183.0], [79.2, 183.0], [79.3, 183.0], [79.4, 184.0], [79.5, 184.0], [79.6, 185.0], [79.7, 185.0], [79.8, 185.0], [79.9, 186.0], [80.0, 186.0], [80.1, 186.0], [80.2, 187.0], [80.3, 187.0], [80.4, 187.0], [80.5, 188.0], [80.6, 188.0], [80.7, 188.0], [80.8, 189.0], [80.9, 189.0], [81.0, 189.0], [81.1, 190.0], [81.2, 190.0], [81.3, 190.0], [81.4, 191.0], [81.5, 191.0], [81.6, 192.0], [81.7, 192.0], [81.8, 193.0], [81.9, 193.0], [82.0, 193.0], [82.1, 194.0], [82.2, 195.0], [82.3, 195.0], [82.4, 195.0], [82.5, 195.0], [82.6, 196.0], [82.7, 196.0], [82.8, 197.0], [82.9, 197.0], [83.0, 198.0], [83.1, 198.0], [83.2, 198.0], [83.3, 199.0], [83.4, 199.0], [83.5, 200.0], [83.6, 200.0], [83.7, 201.0], [83.8, 201.0], [83.9, 202.0], [84.0, 203.0], [84.1, 203.0], [84.2, 203.0], [84.3, 204.0], [84.4, 204.0], [84.5, 205.0], [84.6, 205.0], [84.7, 206.0], [84.8, 206.0], [84.9, 207.0], [85.0, 207.0], [85.1, 208.0], [85.2, 208.0], [85.3, 209.0], [85.4, 209.0], [85.5, 210.0], [85.6, 210.0], [85.7, 211.0], [85.8, 211.0], [85.9, 212.0], [86.0, 212.0], [86.1, 213.0], [86.2, 213.0], [86.3, 214.0], [86.4, 215.0], [86.5, 215.0], [86.6, 216.0], [86.7, 217.0], [86.8, 217.0], [86.9, 218.0], [87.0, 219.0], [87.1, 219.0], [87.2, 220.0], [87.3, 220.0], [87.4, 221.0], [87.5, 221.0], [87.6, 222.0], [87.7, 223.0], [87.8, 223.0], [87.9, 224.0], [88.0, 225.0], [88.1, 225.0], [88.2, 225.0], [88.3, 226.0], [88.4, 226.0], [88.5, 227.0], [88.6, 227.0], [88.7, 228.0], [88.8, 228.0], [88.9, 229.0], [89.0, 230.0], [89.1, 231.0], [89.2, 231.0], [89.3, 232.0], [89.4, 233.0], [89.5, 233.0], [89.6, 234.0], [89.7, 235.0], [89.8, 235.0], [89.9, 236.0], [90.0, 237.0], [90.1, 238.0], [90.2, 239.0], [90.3, 239.0], [90.4, 240.0], [90.5, 240.0], [90.6, 241.0], [90.7, 242.0], [90.8, 243.0], [90.9, 244.0], [91.0, 245.0], [91.1, 246.0], [91.2, 247.0], [91.3, 248.0], [91.4, 249.0], [91.5, 250.0], [91.6, 251.0], [91.7, 251.0], [91.8, 252.0], [91.9, 253.0], [92.0, 254.0], [92.1, 255.0], [92.2, 256.0], [92.3, 257.0], [92.4, 258.0], [92.5, 259.0], [92.6, 260.0], [92.7, 262.0], [92.8, 263.0], [92.9, 264.0], [93.0, 265.0], [93.1, 266.0], [93.2, 267.0], [93.3, 269.0], [93.4, 270.0], [93.5, 271.0], [93.6, 273.0], [93.7, 274.0], [93.8, 275.0], [93.9, 276.0], [94.0, 277.0], [94.1, 279.0], [94.2, 280.0], [94.3, 282.0], [94.4, 283.0], [94.5, 284.0], [94.6, 287.0], [94.7, 288.0], [94.8, 289.0], [94.9, 291.0], [95.0, 293.0], [95.1, 294.0], [95.2, 295.0], [95.3, 297.0], [95.4, 298.0], [95.5, 300.0], [95.6, 302.0], [95.7, 304.0], [95.8, 306.0], [95.9, 308.0], [96.0, 310.0], [96.1, 312.0], [96.2, 314.0], [96.3, 316.0], [96.4, 318.0], [96.5, 320.0], [96.6, 322.0], [96.7, 324.0], [96.8, 326.0], [96.9, 328.0], [97.0, 331.0], [97.1, 334.0], [97.2, 337.0], [97.3, 340.0], [97.4, 343.0], [97.5, 345.0], [97.6, 349.0], [97.7, 351.0], [97.8, 354.0], [97.9, 358.0], [98.0, 362.0], [98.1, 366.0], [98.2, 371.0], [98.3, 375.0], [98.4, 378.0], [98.5, 383.0], [98.6, 388.0], [98.7, 397.0], [98.8, 404.0], [98.9, 411.0], [99.0, 418.0], [99.1, 427.0], [99.2, 437.0], [99.3, 451.0], [99.4, 462.0], [99.5, 478.0], [99.6, 497.0], [99.7, 522.0], [99.8, 586.0], [99.9, 706.0]], "isOverall": false, "label": "02 - Validate Invoice", "isController": false}, {"data": [[0.0, 142.0], [0.1, 150.0], [0.2, 154.0], [0.3, 158.0], [0.4, 164.0], [0.5, 168.0], [0.6, 174.0], [0.7, 179.0], [0.8, 182.0], [0.9, 188.0], [1.0, 192.0], [1.1, 195.0], [1.2, 198.0], [1.3, 202.0], [1.4, 205.0], [1.5, 208.0], [1.6, 211.0], [1.7, 213.0], [1.8, 216.0], [1.9, 218.0], [2.0, 220.0], [2.1, 222.0], [2.2, 224.0], [2.3, 227.0], [2.4, 230.0], [2.5, 232.0], [2.6, 233.0], [2.7, 235.0], [2.8, 237.0], [2.9, 239.0], [3.0, 240.0], [3.1, 242.0], [3.2, 243.0], [3.3, 246.0], [3.4, 247.0], [3.5, 249.0], [3.6, 251.0], [3.7, 253.0], [3.8, 255.0], [3.9, 256.0], [4.0, 257.0], [4.1, 258.0], [4.2, 260.0], [4.3, 262.0], [4.4, 263.0], [4.5, 265.0], [4.6, 267.0], [4.7, 269.0], [4.8, 271.0], [4.9, 274.0], [5.0, 275.0], [5.1, 276.0], [5.2, 278.0], [5.3, 280.0], [5.4, 281.0], [5.5, 283.0], [5.6, 284.0], [5.7, 286.0], [5.8, 288.0], [5.9, 290.0], [6.0, 292.0], [6.1, 293.0], [6.2, 294.0], [6.3, 296.0], [6.4, 297.0], [6.5, 300.0], [6.6, 301.0], [6.7, 302.0], [6.8, 304.0], [6.9, 306.0], [7.0, 307.0], [7.1, 308.0], [7.2, 310.0], [7.3, 311.0], [7.4, 312.0], [7.5, 314.0], [7.6, 316.0], [7.7, 317.0], [7.8, 319.0], [7.9, 321.0], [8.0, 322.0], [8.1, 324.0], [8.2, 325.0], [8.3, 327.0], [8.4, 328.0], [8.5, 329.0], [8.6, 331.0], [8.7, 332.0], [8.8, 334.0], [8.9, 336.0], [9.0, 337.0], [9.1, 339.0], [9.2, 342.0], [9.3, 343.0], [9.4, 345.0], [9.5, 347.0], [9.6, 348.0], [9.7, 349.0], [9.8, 351.0], [9.9, 354.0], [10.0, 356.0], [10.1, 357.0], [10.2, 359.0], [10.3, 361.0], [10.4, 362.0], [10.5, 363.0], [10.6, 364.0], [10.7, 366.0], [10.8, 368.0], [10.9, 369.0], [11.0, 372.0], [11.1, 374.0], [11.2, 375.0], [11.3, 376.0], [11.4, 377.0], [11.5, 379.0], [11.6, 380.0], [11.7, 382.0], [11.8, 383.0], [11.9, 385.0], [12.0, 387.0], [12.1, 389.0], [12.2, 391.0], [12.3, 393.0], [12.4, 393.0], [12.5, 395.0], [12.6, 396.0], [12.7, 399.0], [12.8, 400.0], [12.9, 402.0], [13.0, 405.0], [13.1, 406.0], [13.2, 408.0], [13.3, 409.0], [13.4, 411.0], [13.5, 412.0], [13.6, 415.0], [13.7, 416.0], [13.8, 417.0], [13.9, 419.0], [14.0, 419.0], [14.1, 422.0], [14.2, 423.0], [14.3, 425.0], [14.4, 429.0], [14.5, 430.0], [14.6, 432.0], [14.7, 433.0], [14.8, 436.0], [14.9, 438.0], [15.0, 440.0], [15.1, 441.0], [15.2, 443.0], [15.3, 444.0], [15.4, 446.0], [15.5, 447.0], [15.6, 450.0], [15.7, 451.0], [15.8, 452.0], [15.9, 454.0], [16.0, 456.0], [16.1, 457.0], [16.2, 458.0], [16.3, 459.0], [16.4, 460.0], [16.5, 462.0], [16.6, 463.0], [16.7, 464.0], [16.8, 466.0], [16.9, 467.0], [17.0, 468.0], [17.1, 469.0], [17.2, 471.0], [17.3, 473.0], [17.4, 475.0], [17.5, 476.0], [17.6, 477.0], [17.7, 479.0], [17.8, 480.0], [17.9, 482.0], [18.0, 483.0], [18.1, 485.0], [18.2, 487.0], [18.3, 488.0], [18.4, 489.0], [18.5, 491.0], [18.6, 492.0], [18.7, 493.0], [18.8, 494.0], [18.9, 496.0], [19.0, 498.0], [19.1, 500.0], [19.2, 502.0], [19.3, 503.0], [19.4, 505.0], [19.5, 506.0], [19.6, 507.0], [19.7, 509.0], [19.8, 510.0], [19.9, 512.0], [20.0, 513.0], [20.1, 515.0], [20.2, 516.0], [20.3, 517.0], [20.4, 519.0], [20.5, 521.0], [20.6, 523.0], [20.7, 524.0], [20.8, 526.0], [20.9, 528.0], [21.0, 529.0], [21.1, 530.0], [21.2, 531.0], [21.3, 532.0], [21.4, 534.0], [21.5, 535.0], [21.6, 537.0], [21.7, 538.0], [21.8, 539.0], [21.9, 541.0], [22.0, 542.0], [22.1, 543.0], [22.2, 545.0], [22.3, 547.0], [22.4, 549.0], [22.5, 550.0], [22.6, 552.0], [22.7, 553.0], [22.8, 555.0], [22.9, 557.0], [23.0, 559.0], [23.1, 560.0], [23.2, 561.0], [23.3, 562.0], [23.4, 563.0], [23.5, 565.0], [23.6, 566.0], [23.7, 568.0], [23.8, 570.0], [23.9, 571.0], [24.0, 574.0], [24.1, 575.0], [24.2, 576.0], [24.3, 577.0], [24.4, 578.0], [24.5, 580.0], [24.6, 581.0], [24.7, 583.0], [24.8, 584.0], [24.9, 586.0], [25.0, 587.0], [25.1, 588.0], [25.2, 589.0], [25.3, 590.0], [25.4, 592.0], [25.5, 594.0], [25.6, 596.0], [25.7, 597.0], [25.8, 599.0], [25.9, 600.0], [26.0, 601.0], [26.1, 603.0], [26.2, 605.0], [26.3, 606.0], [26.4, 608.0], [26.5, 610.0], [26.6, 611.0], [26.7, 613.0], [26.8, 614.0], [26.9, 616.0], [27.0, 617.0], [27.1, 619.0], [27.2, 622.0], [27.3, 623.0], [27.4, 624.0], [27.5, 625.0], [27.6, 627.0], [27.7, 629.0], [27.8, 630.0], [27.9, 631.0], [28.0, 633.0], [28.1, 635.0], [28.2, 636.0], [28.3, 637.0], [28.4, 639.0], [28.5, 641.0], [28.6, 642.0], [28.7, 644.0], [28.8, 646.0], [28.9, 647.0], [29.0, 648.0], [29.1, 650.0], [29.2, 650.0], [29.3, 652.0], [29.4, 654.0], [29.5, 656.0], [29.6, 657.0], [29.7, 659.0], [29.8, 660.0], [29.9, 662.0], [30.0, 664.0], [30.1, 667.0], [30.2, 668.0], [30.3, 670.0], [30.4, 671.0], [30.5, 672.0], [30.6, 673.0], [30.7, 675.0], [30.8, 676.0], [30.9, 678.0], [31.0, 680.0], [31.1, 682.0], [31.2, 684.0], [31.3, 684.0], [31.4, 685.0], [31.5, 686.0], [31.6, 687.0], [31.7, 689.0], [31.8, 690.0], [31.9, 692.0], [32.0, 693.0], [32.1, 694.0], [32.2, 696.0], [32.3, 696.0], [32.4, 698.0], [32.5, 699.0], [32.6, 701.0], [32.7, 701.0], [32.8, 703.0], [32.9, 704.0], [33.0, 705.0], [33.1, 706.0], [33.2, 708.0], [33.3, 709.0], [33.4, 710.0], [33.5, 711.0], [33.6, 712.0], [33.7, 714.0], [33.8, 716.0], [33.9, 717.0], [34.0, 719.0], [34.1, 721.0], [34.2, 722.0], [34.3, 723.0], [34.4, 724.0], [34.5, 726.0], [34.6, 727.0], [34.7, 729.0], [34.8, 729.0], [34.9, 731.0], [35.0, 732.0], [35.1, 733.0], [35.2, 735.0], [35.3, 736.0], [35.4, 738.0], [35.5, 739.0], [35.6, 740.0], [35.7, 741.0], [35.8, 742.0], [35.9, 744.0], [36.0, 745.0], [36.1, 746.0], [36.2, 747.0], [36.3, 748.0], [36.4, 750.0], [36.5, 750.0], [36.6, 752.0], [36.7, 753.0], [36.8, 754.0], [36.9, 755.0], [37.0, 756.0], [37.1, 757.0], [37.2, 759.0], [37.3, 760.0], [37.4, 761.0], [37.5, 763.0], [37.6, 763.0], [37.7, 765.0], [37.8, 766.0], [37.9, 768.0], [38.0, 770.0], [38.1, 771.0], [38.2, 773.0], [38.3, 774.0], [38.4, 775.0], [38.5, 776.0], [38.6, 778.0], [38.7, 779.0], [38.8, 782.0], [38.9, 783.0], [39.0, 784.0], [39.1, 785.0], [39.2, 787.0], [39.3, 788.0], [39.4, 789.0], [39.5, 790.0], [39.6, 792.0], [39.7, 793.0], [39.8, 794.0], [39.9, 797.0], [40.0, 798.0], [40.1, 799.0], [40.2, 800.0], [40.3, 802.0], [40.4, 804.0], [40.5, 805.0], [40.6, 806.0], [40.7, 808.0], [40.8, 810.0], [40.9, 811.0], [41.0, 812.0], [41.1, 814.0], [41.2, 815.0], [41.3, 816.0], [41.4, 817.0], [41.5, 819.0], [41.6, 820.0], [41.7, 821.0], [41.8, 823.0], [41.9, 825.0], [42.0, 826.0], [42.1, 827.0], [42.2, 828.0], [42.3, 829.0], [42.4, 831.0], [42.5, 832.0], [42.6, 833.0], [42.7, 834.0], [42.8, 835.0], [42.9, 837.0], [43.0, 838.0], [43.1, 839.0], [43.2, 840.0], [43.3, 842.0], [43.4, 843.0], [43.5, 845.0], [43.6, 846.0], [43.7, 848.0], [43.8, 849.0], [43.9, 850.0], [44.0, 851.0], [44.1, 853.0], [44.2, 855.0], [44.3, 856.0], [44.4, 857.0], [44.5, 858.0], [44.6, 859.0], [44.7, 860.0], [44.8, 861.0], [44.9, 863.0], [45.0, 864.0], [45.1, 865.0], [45.2, 867.0], [45.3, 868.0], [45.4, 869.0], [45.5, 871.0], [45.6, 872.0], [45.7, 873.0], [45.8, 876.0], [45.9, 876.0], [46.0, 877.0], [46.1, 879.0], [46.2, 881.0], [46.3, 882.0], [46.4, 884.0], [46.5, 885.0], [46.6, 886.0], [46.7, 887.0], [46.8, 888.0], [46.9, 889.0], [47.0, 890.0], [47.1, 891.0], [47.2, 893.0], [47.3, 895.0], [47.4, 896.0], [47.5, 897.0], [47.6, 898.0], [47.7, 900.0], [47.8, 902.0], [47.9, 903.0], [48.0, 904.0], [48.1, 906.0], [48.2, 907.0], [48.3, 908.0], [48.4, 910.0], [48.5, 911.0], [48.6, 912.0], [48.7, 913.0], [48.8, 915.0], [48.9, 916.0], [49.0, 918.0], [49.1, 920.0], [49.2, 921.0], [49.3, 922.0], [49.4, 923.0], [49.5, 925.0], [49.6, 927.0], [49.7, 929.0], [49.8, 930.0], [49.9, 931.0], [50.0, 933.0], [50.1, 934.0], [50.2, 936.0], [50.3, 937.0], [50.4, 940.0], [50.5, 941.0], [50.6, 942.0], [50.7, 943.0], [50.8, 944.0], [50.9, 946.0], [51.0, 947.0], [51.1, 949.0], [51.2, 950.0], [51.3, 952.0], [51.4, 954.0], [51.5, 955.0], [51.6, 957.0], [51.7, 959.0], [51.8, 960.0], [51.9, 961.0], [52.0, 962.0], [52.1, 964.0], [52.2, 965.0], [52.3, 967.0], [52.4, 968.0], [52.5, 969.0], [52.6, 971.0], [52.7, 972.0], [52.8, 973.0], [52.9, 975.0], [53.0, 976.0], [53.1, 978.0], [53.2, 979.0], [53.3, 980.0], [53.4, 982.0], [53.5, 984.0], [53.6, 985.0], [53.7, 986.0], [53.8, 987.0], [53.9, 988.0], [54.0, 990.0], [54.1, 992.0], [54.2, 994.0], [54.3, 994.0], [54.4, 996.0], [54.5, 997.0], [54.6, 998.0], [54.7, 1000.0], [54.8, 1001.0], [54.9, 1003.0], [55.0, 1004.0], [55.1, 1006.0], [55.2, 1007.0], [55.3, 1008.0], [55.4, 1009.0], [55.5, 1011.0], [55.6, 1013.0], [55.7, 1014.0], [55.8, 1016.0], [55.9, 1018.0], [56.0, 1020.0], [56.1, 1021.0], [56.2, 1022.0], [56.3, 1024.0], [56.4, 1025.0], [56.5, 1027.0], [56.6, 1028.0], [56.7, 1029.0], [56.8, 1031.0], [56.9, 1032.0], [57.0, 1034.0], [57.1, 1036.0], [57.2, 1037.0], [57.3, 1039.0], [57.4, 1041.0], [57.5, 1043.0], [57.6, 1044.0], [57.7, 1046.0], [57.8, 1047.0], [57.9, 1049.0], [58.0, 1050.0], [58.1, 1052.0], [58.2, 1053.0], [58.3, 1054.0], [58.4, 1055.0], [58.5, 1056.0], [58.6, 1057.0], [58.7, 1058.0], [58.8, 1059.0], [58.9, 1061.0], [59.0, 1062.0], [59.1, 1064.0], [59.2, 1065.0], [59.3, 1067.0], [59.4, 1068.0], [59.5, 1070.0], [59.6, 1071.0], [59.7, 1073.0], [59.8, 1074.0], [59.9, 1075.0], [60.0, 1076.0], [60.1, 1078.0], [60.2, 1080.0], [60.3, 1081.0], [60.4, 1083.0], [60.5, 1085.0], [60.6, 1086.0], [60.7, 1087.0], [60.8, 1089.0], [60.9, 1090.0], [61.0, 1092.0], [61.1, 1093.0], [61.2, 1095.0], [61.3, 1097.0], [61.4, 1098.0], [61.5, 1099.0], [61.6, 1101.0], [61.7, 1103.0], [61.8, 1104.0], [61.9, 1104.0], [62.0, 1107.0], [62.1, 1108.0], [62.2, 1110.0], [62.3, 1111.0], [62.4, 1114.0], [62.5, 1115.0], [62.6, 1116.0], [62.7, 1118.0], [62.8, 1119.0], [62.9, 1122.0], [63.0, 1123.0], [63.1, 1124.0], [63.2, 1126.0], [63.3, 1127.0], [63.4, 1129.0], [63.5, 1130.0], [63.6, 1131.0], [63.7, 1132.0], [63.8, 1133.0], [63.9, 1135.0], [64.0, 1137.0], [64.1, 1138.0], [64.2, 1140.0], [64.3, 1141.0], [64.4, 1143.0], [64.5, 1144.0], [64.6, 1145.0], [64.7, 1147.0], [64.8, 1148.0], [64.9, 1149.0], [65.0, 1150.0], [65.1, 1152.0], [65.2, 1153.0], [65.3, 1155.0], [65.4, 1156.0], [65.5, 1159.0], [65.6, 1160.0], [65.7, 1161.0], [65.8, 1162.0], [65.9, 1164.0], [66.0, 1165.0], [66.1, 1166.0], [66.2, 1168.0], [66.3, 1169.0], [66.4, 1171.0], [66.5, 1173.0], [66.6, 1175.0], [66.7, 1177.0], [66.8, 1179.0], [66.9, 1181.0], [67.0, 1182.0], [67.1, 1184.0], [67.2, 1186.0], [67.3, 1187.0], [67.4, 1188.0], [67.5, 1189.0], [67.6, 1191.0], [67.7, 1192.0], [67.8, 1194.0], [67.9, 1195.0], [68.0, 1197.0], [68.1, 1199.0], [68.2, 1201.0], [68.3, 1202.0], [68.4, 1203.0], [68.5, 1204.0], [68.6, 1206.0], [68.7, 1207.0], [68.8, 1209.0], [68.9, 1210.0], [69.0, 1212.0], [69.1, 1214.0], [69.2, 1215.0], [69.3, 1217.0], [69.4, 1218.0], [69.5, 1219.0], [69.6, 1221.0], [69.7, 1223.0], [69.8, 1225.0], [69.9, 1226.0], [70.0, 1228.0], [70.1, 1229.0], [70.2, 1231.0], [70.3, 1232.0], [70.4, 1234.0], [70.5, 1236.0], [70.6, 1237.0], [70.7, 1239.0], [70.8, 1240.0], [70.9, 1242.0], [71.0, 1244.0], [71.1, 1245.0], [71.2, 1247.0], [71.3, 1248.0], [71.4, 1250.0], [71.5, 1251.0], [71.6, 1253.0], [71.7, 1255.0], [71.8, 1256.0], [71.9, 1258.0], [72.0, 1259.0], [72.1, 1261.0], [72.2, 1262.0], [72.3, 1263.0], [72.4, 1265.0], [72.5, 1267.0], [72.6, 1268.0], [72.7, 1269.0], [72.8, 1270.0], [72.9, 1273.0], [73.0, 1274.0], [73.1, 1275.0], [73.2, 1278.0], [73.3, 1279.0], [73.4, 1280.0], [73.5, 1282.0], [73.6, 1283.0], [73.7, 1284.0], [73.8, 1286.0], [73.9, 1288.0], [74.0, 1291.0], [74.1, 1292.0], [74.2, 1294.0], [74.3, 1296.0], [74.4, 1298.0], [74.5, 1300.0], [74.6, 1301.0], [74.7, 1302.0], [74.8, 1303.0], [74.9, 1305.0], [75.0, 1306.0], [75.1, 1308.0], [75.2, 1310.0], [75.3, 1311.0], [75.4, 1313.0], [75.5, 1315.0], [75.6, 1316.0], [75.7, 1318.0], [75.8, 1320.0], [75.9, 1321.0], [76.0, 1322.0], [76.1, 1323.0], [76.2, 1325.0], [76.3, 1327.0], [76.4, 1328.0], [76.5, 1330.0], [76.6, 1331.0], [76.7, 1332.0], [76.8, 1333.0], [76.9, 1335.0], [77.0, 1337.0], [77.1, 1338.0], [77.2, 1340.0], [77.3, 1343.0], [77.4, 1345.0], [77.5, 1346.0], [77.6, 1348.0], [77.7, 1349.0], [77.8, 1350.0], [77.9, 1352.0], [78.0, 1354.0], [78.1, 1356.0], [78.2, 1358.0], [78.3, 1360.0], [78.4, 1362.0], [78.5, 1363.0], [78.6, 1364.0], [78.7, 1366.0], [78.8, 1368.0], [78.9, 1369.0], [79.0, 1371.0], [79.1, 1374.0], [79.2, 1376.0], [79.3, 1377.0], [79.4, 1379.0], [79.5, 1380.0], [79.6, 1382.0], [79.7, 1383.0], [79.8, 1386.0], [79.9, 1387.0], [80.0, 1390.0], [80.1, 1391.0], [80.2, 1393.0], [80.3, 1394.0], [80.4, 1395.0], [80.5, 1397.0], [80.6, 1398.0], [80.7, 1400.0], [80.8, 1401.0], [80.9, 1403.0], [81.0, 1405.0], [81.1, 1407.0], [81.2, 1408.0], [81.3, 1410.0], [81.4, 1412.0], [81.5, 1413.0], [81.6, 1415.0], [81.7, 1417.0], [81.8, 1420.0], [81.9, 1422.0], [82.0, 1425.0], [82.1, 1426.0], [82.2, 1429.0], [82.3, 1430.0], [82.4, 1432.0], [82.5, 1434.0], [82.6, 1436.0], [82.7, 1438.0], [82.8, 1440.0], [82.9, 1443.0], [83.0, 1445.0], [83.1, 1448.0], [83.2, 1449.0], [83.3, 1451.0], [83.4, 1453.0], [83.5, 1454.0], [83.6, 1456.0], [83.7, 1460.0], [83.8, 1461.0], [83.9, 1463.0], [84.0, 1465.0], [84.1, 1467.0], [84.2, 1468.0], [84.3, 1470.0], [84.4, 1471.0], [84.5, 1475.0], [84.6, 1477.0], [84.7, 1479.0], [84.8, 1480.0], [84.9, 1482.0], [85.0, 1484.0], [85.1, 1486.0], [85.2, 1488.0], [85.3, 1490.0], [85.4, 1491.0], [85.5, 1494.0], [85.6, 1496.0], [85.7, 1498.0], [85.8, 1501.0], [85.9, 1503.0], [86.0, 1505.0], [86.1, 1508.0], [86.2, 1510.0], [86.3, 1511.0], [86.4, 1514.0], [86.5, 1517.0], [86.6, 1519.0], [86.7, 1522.0], [86.8, 1523.0], [86.9, 1525.0], [87.0, 1527.0], [87.1, 1530.0], [87.2, 1532.0], [87.3, 1535.0], [87.4, 1539.0], [87.5, 1540.0], [87.6, 1543.0], [87.7, 1546.0], [87.8, 1549.0], [87.9, 1553.0], [88.0, 1557.0], [88.1, 1559.0], [88.2, 1562.0], [88.3, 1564.0], [88.4, 1567.0], [88.5, 1571.0], [88.6, 1573.0], [88.7, 1575.0], [88.8, 1577.0], [88.9, 1580.0], [89.0, 1581.0], [89.1, 1584.0], [89.2, 1586.0], [89.3, 1590.0], [89.4, 1593.0], [89.5, 1595.0], [89.6, 1598.0], [89.7, 1601.0], [89.8, 1604.0], [89.9, 1608.0], [90.0, 1611.0], [90.1, 1615.0], [90.2, 1619.0], [90.3, 1621.0], [90.4, 1623.0], [90.5, 1625.0], [90.6, 1629.0], [90.7, 1632.0], [90.8, 1633.0], [90.9, 1636.0], [91.0, 1638.0], [91.1, 1642.0], [91.2, 1647.0], [91.3, 1650.0], [91.4, 1654.0], [91.5, 1656.0], [91.6, 1659.0], [91.7, 1662.0], [91.8, 1666.0], [91.9, 1671.0], [92.0, 1673.0], [92.1, 1676.0], [92.2, 1678.0], [92.3, 1682.0], [92.4, 1686.0], [92.5, 1691.0], [92.6, 1694.0], [92.7, 1697.0], [92.8, 1701.0], [92.9, 1705.0], [93.0, 1710.0], [93.1, 1713.0], [93.2, 1715.0], [93.3, 1720.0], [93.4, 1723.0], [93.5, 1725.0], [93.6, 1729.0], [93.7, 1732.0], [93.8, 1738.0], [93.9, 1741.0], [94.0, 1746.0], [94.1, 1750.0], [94.2, 1754.0], [94.3, 1758.0], [94.4, 1761.0], [94.5, 1767.0], [94.6, 1771.0], [94.7, 1776.0], [94.8, 1782.0], [94.9, 1786.0], [95.0, 1790.0], [95.1, 1793.0], [95.2, 1799.0], [95.3, 1803.0], [95.4, 1811.0], [95.5, 1815.0], [95.6, 1820.0], [95.7, 1823.0], [95.8, 1830.0], [95.9, 1835.0], [96.0, 1839.0], [96.1, 1842.0], [96.2, 1851.0], [96.3, 1855.0], [96.4, 1860.0], [96.5, 1866.0], [96.6, 1876.0], [96.7, 1884.0], [96.8, 1891.0], [96.9, 1895.0], [97.0, 1905.0], [97.1, 1911.0], [97.2, 1919.0], [97.3, 1927.0], [97.4, 1937.0], [97.5, 1943.0], [97.6, 1955.0], [97.7, 1963.0], [97.8, 1975.0], [97.9, 1987.0], [98.0, 1995.0], [98.1, 2015.0], [98.2, 2023.0], [98.3, 2037.0], [98.4, 2046.0], [98.5, 2055.0], [98.6, 2071.0], [98.7, 2085.0], [98.8, 2096.0], [98.9, 2106.0], [99.0, 2113.0], [99.1, 2127.0], [99.2, 2155.0], [99.3, 2177.0], [99.4, 2215.0], [99.5, 2239.0], [99.6, 2281.0], [99.7, 2313.0], [99.8, 2417.0], [99.9, 2510.0], [100.0, 2983.0]], "isOverall": false, "label": "01 - Login", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 5654.0, "series": [{"data": [[0.0, 5506.0], [300.0, 437.0], [600.0, 12.0], [700.0, 12.0], [200.0, 1609.0], [100.0, 5654.0], [400.0, 116.0], [1000.0, 2.0], [500.0, 26.0]], "isOverall": false, "label": "02 - Validate Invoice", "isController": false}, {"data": [[600.0, 898.0], [700.0, 1027.0], [800.0, 1009.0], [900.0, 944.0], [1000.0, 919.0], [1100.0, 889.0], [1200.0, 855.0], [1300.0, 830.0], [1400.0, 687.0], [1500.0, 523.0], [100.0, 169.0], [1600.0, 417.0], [1700.0, 330.0], [1800.0, 234.0], [1900.0, 146.0], [2000.0, 110.0], [2100.0, 67.0], [2200.0, 41.0], [2300.0, 18.0], [2400.0, 14.0], [2500.0, 4.0], [2600.0, 5.0], [2800.0, 2.0], [2700.0, 2.0], [2900.0, 1.0], [200.0, 701.0], [300.0, 843.0], [400.0, 855.0], [500.0, 909.0]], "isOverall": false, "label": "01 - Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 2900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1910.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 13765.0, "series": [{"data": [[0.0, 13765.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 8966.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1910.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 2182.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 8.523809523809526, "minX": 1.76119524E12, "maxY": 100.0, "series": [{"data": [[1.76119548E12, 100.0], [1.7611953E12, 84.82444998865957], [1.76119542E12, 100.0], [1.76119524E12, 8.523809523809526], [1.76119554E12, 99.08800293955537], [1.76119536E12, 100.0]], "isOverall": false, "label": "Normal Load - 100 Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.76119554E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.0, "maxY": 1860.0, "series": [{"data": [[9.0, 613.6666666666666], [10.0, 61.0], [11.0, 48.0], [12.0, 47.99999999999999], [13.0, 66.5], [14.0, 85.5], [15.0, 57.75], [16.0, 55.42857142857143], [17.0, 69.33333333333333], [18.0, 51.0], [19.0, 47.83333333333333], [20.0, 54.333333333333336], [21.0, 47.0], [22.0, 47.37499999999999], [23.0, 90.8], [24.0, 250.5], [25.0, 257.5714285714286], [26.0, 123.2], [27.0, 90.8], [28.0, 135.22222222222226], [29.0, 91.83333333333333], [30.0, 54.6], [31.0, 92.0], [32.0, 66.63636363636364], [33.0, 67.66666666666666], [34.0, 68.77777777777777], [35.0, 41.285714285714285], [36.0, 42.833333333333336], [37.0, 95.125], [38.0, 53.99999999999999], [39.0, 85.42857142857143], [40.0, 77.85714285714286], [41.0, 119.66666666666666], [42.0, 113.83333333333333], [43.0, 214.6], [44.0, 66.5], [45.0, 108.38888888888889], [46.0, 50.0], [47.0, 74.27272727272728], [48.0, 87.75], [49.0, 100.57142857142857], [50.0, 114.92307692307693], [51.0, 99.85714285714286], [52.0, 67.14285714285715], [53.0, 78.84615384615384], [54.0, 65.55555555555557], [55.0, 68.0909090909091], [56.0, 92.38888888888889], [57.0, 92.7], [58.0, 106.375], [59.0, 72.45454545454545], [60.0, 104.85714285714286], [61.0, 129.08333333333331], [62.0, 86.66666666666667], [63.0, 96.5], [64.0, 105.99999999999999], [65.0, 129.88888888888889], [66.0, 154.1666666666667], [67.0, 122.44444444444444], [68.0, 127.6], [69.0, 78.0], [70.0, 83.8], [71.0, 96.46153846153847], [72.0, 89.26666666666668], [73.0, 77.25], [74.0, 88.33333333333334], [75.0, 136.41666666666669], [76.0, 237.5], [77.0, 255.23076923076923], [78.0, 174.85714285714286], [79.0, 240.60000000000002], [80.0, 161.73333333333335], [81.0, 133.36363636363635], [82.0, 212.64285714285714], [83.0, 168.92307692307696], [84.0, 91.99999999999999], [85.0, 25.0], [90.0, 66.0], [89.0, 86.0], [94.0, 104.0], [96.0, 209.19047619047618], [97.0, 254.24999999999997], [98.0, 187.33333333333331], [99.0, 150.70000000000002], [100.0, 134.866417673236]], "isOverall": false, "label": "02 - Validate Invoice", "isController": false}, {"data": [[97.43808882907148, 133.79131149992642]], "isOverall": false, "label": "02 - Validate Invoice-Aggregated", "isController": false}, {"data": [[2.0, 660.0], [3.0, 505.0], [4.0, 797.0], [5.0, 760.0], [6.0, 834.0], [7.0, 821.0], [8.0, 511.0], [9.0, 891.0], [10.0, 311.5], [11.0, 343.42857142857144], [12.0, 657.6666666666667], [13.0, 498.0], [14.0, 264.0], [15.0, 264.3333333333333], [16.0, 772.0], [17.0, 239.6], [18.0, 166.4], [19.0, 462.5], [20.0, 573.0], [21.0, 168.375], [22.0, 392.875], [23.0, 388.6], [24.0, 566.8], [25.0, 448.0], [26.0, 527.0], [27.0, 555.8333333333334], [28.0, 436.57142857142856], [29.0, 313.3333333333333], [30.0, 220.9090909090909], [31.0, 259.2222222222222], [32.0, 212.33333333333334], [33.0, 293.91666666666663], [34.0, 210.36363636363635], [35.0, 430.20000000000005], [36.0, 317.54545454545456], [37.0, 444.2], [38.0, 238.7142857142857], [39.0, 256.5], [40.0, 253.55555555555554], [41.0, 338.44444444444446], [42.0, 423.0], [43.0, 678.0], [44.0, 471.94117647058823], [45.0, 261.875], [46.0, 438.25], [47.0, 251.66666666666666], [48.0, 493.8888888888889], [49.0, 526.2500000000001], [50.0, 442.07692307692304], [51.0, 359.25], [52.0, 298.93333333333334], [53.0, 390.42857142857144], [54.0, 317.8], [55.0, 224.72727272727272], [56.0, 313.20000000000005], [57.0, 336.6428571428571], [58.0, 349.35714285714283], [59.0, 504.4666666666667], [60.0, 433.1111111111111], [61.0, 555.9230769230769], [62.0, 599.2222222222222], [63.0, 497.2666666666666], [64.0, 492.5714285714286], [65.0, 530.0], [66.0, 489.09999999999997], [67.0, 856.25], [68.0, 839.4285714285714], [69.0, 718.9545454545454], [70.0, 606.4736842105264], [71.0, 429.6153846153846], [72.0, 437.00000000000006], [73.0, 433.6363636363636], [74.0, 622.75], [75.0, 662.1111111111111], [76.0, 864.3333333333334], [77.0, 990.2857142857143], [78.0, 1045.1666666666667], [79.0, 1219.5714285714287], [80.0, 1152.769230769231], [81.0, 1145.076923076923], [82.0, 1127.4666666666667], [83.0, 935.4285714285713], [84.0, 592.3333333333334], [87.0, 1860.0], [86.0, 1318.0], [91.0, 1295.0], [90.0, 1574.0], [89.0, 1769.0], [94.0, 1812.0], [92.0, 761.0], [96.0, 710.7], [97.0, 1057.090909090909], [98.0, 1018.2777777777779], [99.0, 1224.8333333333333], [100.0, 996.805023448052], [1.0, 739.0]], "isOverall": false, "label": "01 - Login", "isController": false}, {"data": [[97.06067365603434, 968.63276080006]], "isOverall": false, "label": "01 - Login-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 125.15, "minX": 1.76119524E12, "maxY": 59526.433333333334, "series": [{"data": [[1.76119548E12, 59096.55], [1.7611953E12, 45655.816666666666], [1.76119542E12, 57090.98333333333], [1.76119524E12, 229.23333333333332], [1.76119554E12, 56569.45], [1.76119536E12, 59526.433333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.76119548E12, 38438.333333333336], [1.7611953E12, 29657.2], [1.76119542E12, 37207.433333333334], [1.76119524E12, 125.15], [1.76119554E12, 36608.35], [1.76119536E12, 38776.63333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.76119554E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 100.45586053412465, "minX": 1.76119524E12, "maxY": 1009.4832519190502, "series": [{"data": [[1.76119548E12, 115.67755532139086], [1.7611953E12, 165.2466819221968], [1.76119542E12, 138.509775524982], [1.76119524E12, 534.7142857142857], [1.76119554E12, 100.45586053412465], [1.76119536E12, 153.55961070559619]], "isOverall": false, "label": "02 - Validate Invoice", "isController": false}, {"data": [[1.76119548E12, 949.5801473167306], [1.7611953E12, 901.6357913669062], [1.76119542E12, 997.8289042591915], [1.76119524E12, 169.28571428571428], [1.76119554E12, 974.9057153258095], [1.76119536E12, 1009.4832519190502]], "isOverall": false, "label": "01 - Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.76119554E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 99.74777448071224, "minX": 1.76119524E12, "maxY": 1008.5157013258889, "series": [{"data": [[1.76119548E12, 114.70741131015106], [1.7611953E12, 163.4297482837532], [1.76119542E12, 137.23135409123802], [1.76119524E12, 534.2857142857142], [1.76119554E12, 99.74777448071224], [1.76119536E12, 152.34584636774463]], "isOverall": false, "label": "02 - Validate Invoice", "isController": false}, {"data": [[1.76119548E12, 948.8923184847421], [1.7611953E12, 900.6497302158281], [1.76119542E12, 997.0331270476867], [1.76119524E12, 168.71428571428572], [1.76119554E12, 974.2788496541696], [1.76119536E12, 1008.5157013258889]], "isOverall": false, "label": "01 - Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.76119554E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.76119524E12, "maxY": 4.928571428571428, "series": [{"data": [[1.76119548E12, 0.024587284861257493], [1.7611953E12, 0.006864988558352404], [1.76119542E12, 0.026068066618392494], [1.76119524E12, 0.0], [1.76119554E12, 0.023367952522255212], [1.76119536E12, 0.026416405978449815]], "isOverall": false, "label": "02 - Validate Invoice", "isController": false}, {"data": [[1.76119548E12, 0.007015082427218508], [1.7611953E12, 0.06250000000000014], [1.76119542E12, 0.009100837277029502], [1.76119524E12, 4.928571428571428], [1.76119554E12, 0.010192937750273048], [1.76119536E12, 0.008374040474528976]], "isOverall": false, "label": "01 - Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.76119554E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 15.0, "minX": 1.76119524E12, "maxY": 2983.0, "series": [{"data": [[1.76119548E12, 2622.0], [1.7611953E12, 2983.0], [1.76119542E12, 2789.0], [1.76119524E12, 237.0], [1.76119554E12, 2444.0], [1.76119536E12, 2667.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.76119548E12, 1349.6000000000004], [1.7611953E12, 1457.800000000001], [1.76119542E12, 1442.6000000000004], [1.76119524E12, 202.70000000000005], [1.76119554E12, 1408.800000000001], [1.76119536E12, 1433.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.76119548E12, 1883.6599999999999], [1.7611953E12, 2114.6599999999994], [1.76119542E12, 2045.5600000000013], [1.76119524E12, 237.0], [1.76119554E12, 2020.04], [1.76119536E12, 2055.039999999999]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.76119548E12, 1563.3000000000002], [1.7611953E12, 1701.0], [1.76119542E12, 1642.0], [1.76119524E12, 237.0], [1.76119554E12, 1637.0], [1.76119536E12, 1659.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.76119548E12, 16.0], [1.7611953E12, 23.0], [1.76119542E12, 22.0], [1.76119524E12, 50.0], [1.76119554E12, 15.0], [1.76119536E12, 18.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.76119548E12, 291.0], [1.7611953E12, 293.0], [1.76119542E12, 361.0], [1.76119524E12, 161.0], [1.76119554E12, 270.0], [1.76119536E12, 451.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.76119554E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 75.0, "minX": 2.0, "maxY": 1518.5, "series": [{"data": [[2.0, 199.0], [3.0, 1344.5], [7.0, 1052.0], [8.0, 1243.0], [9.0, 1429.0], [14.0, 94.5], [16.0, 160.0], [18.0, 75.0], [20.0, 613.0], [22.0, 101.0], [26.0, 1494.5], [31.0, 142.0], [32.0, 148.5], [34.0, 104.5], [36.0, 116.0], [37.0, 95.0], [38.0, 1016.0], [40.0, 1039.0], [43.0, 249.0], [42.0, 1518.5], [47.0, 1070.0], [49.0, 176.0], [48.0, 1251.0], [54.0, 412.0], [55.0, 130.5], [56.0, 998.5], [61.0, 159.0], [60.0, 622.0], [62.0, 226.0], [65.0, 155.5], [64.0, 750.0], [67.0, 1109.0], [70.0, 184.5], [71.0, 911.0], [68.0, 755.0], [69.0, 770.0], [74.0, 582.5], [75.0, 356.0], [73.0, 152.0], [72.0, 111.5], [76.0, 146.5], [79.0, 562.0], [80.0, 130.0], [82.0, 740.5], [81.0, 775.0], [83.0, 507.0], [87.0, 211.0], [85.0, 486.0], [84.0, 289.0], [86.0, 444.0], [90.0, 336.0], [89.0, 294.0], [88.0, 487.5], [91.0, 343.0], [92.0, 400.0], [95.0, 634.0], [94.0, 478.0], [93.0, 259.0], [98.0, 316.0], [99.0, 379.0], [96.0, 271.0], [97.0, 258.0], [102.0, 438.0], [100.0, 326.0], [101.0, 402.0], [103.0, 193.5], [104.0, 322.0], [106.0, 617.0], [107.0, 183.0], [105.0, 187.0], [108.0, 408.0], [109.0, 480.0], [110.0, 388.0], [111.0, 515.0], [114.0, 362.0], [115.0, 327.5], [113.0, 362.0], [112.0, 350.0], [119.0, 438.0], [116.0, 474.5], [118.0, 309.0], [117.0, 162.0], [122.0, 213.0], [123.0, 276.0], [121.0, 164.0], [120.0, 351.0], [124.0, 298.0], [127.0, 346.0], [125.0, 133.0], [126.0, 139.0], [128.0, 543.0], [129.0, 248.0], [131.0, 252.5], [130.0, 195.0], [138.0, 267.0], [139.0, 471.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[16.0, 766.0], [36.0, 261.0], [37.0, 228.0], [40.0, 270.0], [43.0, 346.0], [48.0, 227.0], [54.0, 269.0], [55.0, 222.0], [60.0, 342.5], [62.0, 244.0], [64.0, 275.0], [65.0, 306.0], [67.0, 241.0], [70.0, 205.0], [71.0, 249.0], [68.0, 351.0], [69.0, 284.5], [74.0, 295.5], [75.0, 221.0], [73.0, 233.5], [79.0, 300.0], [82.0, 278.0], [81.0, 325.0], [80.0, 214.0], [83.0, 233.0], [85.0, 251.5], [84.0, 244.5], [86.0, 266.0], [87.0, 232.5], [90.0, 266.0], [89.0, 243.0], [88.0, 258.5], [91.0, 262.5], [92.0, 243.0], [95.0, 269.0], [94.0, 263.0], [93.0, 243.0], [98.0, 241.0], [99.0, 259.0], [96.0, 237.0], [97.0, 231.5], [102.0, 257.0], [100.0, 255.0], [101.0, 493.0], [103.0, 224.0], [104.0, 242.0], [106.0, 277.0], [107.0, 226.5], [105.0, 292.0], [108.0, 226.0], [109.0, 235.0], [110.0, 251.0], [111.0, 256.0], [114.0, 235.0], [115.0, 240.0], [113.0, 241.0], [112.0, 227.5], [119.0, 280.5], [116.0, 282.0], [118.0, 221.0], [117.0, 237.0], [122.0, 226.0], [123.0, 242.0], [121.0, 245.0], [120.0, 226.5], [124.0, 213.0], [127.0, 228.5], [125.0, 284.0], [128.0, 231.0], [129.0, 238.5], [131.0, 224.0], [130.0, 239.0], [139.0, 252.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 139.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 75.0, "minX": 2.0, "maxY": 1517.0, "series": [{"data": [[2.0, 198.5], [3.0, 1342.0], [7.0, 1052.0], [8.0, 1243.0], [9.0, 1428.0], [14.0, 94.0], [16.0, 160.0], [18.0, 75.0], [20.0, 612.5], [22.0, 101.0], [26.0, 1494.0], [31.0, 142.0], [32.0, 148.0], [34.0, 104.0], [36.0, 115.5], [37.0, 95.0], [38.0, 1016.0], [40.0, 1038.0], [43.0, 248.0], [42.0, 1517.0], [47.0, 1069.0], [49.0, 175.0], [48.0, 1250.0], [54.0, 412.0], [55.0, 130.5], [56.0, 998.0], [61.0, 158.0], [60.0, 621.5], [62.0, 226.0], [65.0, 155.0], [64.0, 749.0], [67.0, 1109.0], [70.0, 183.5], [71.0, 911.0], [68.0, 753.0], [69.0, 769.0], [74.0, 582.5], [75.0, 355.5], [73.0, 149.0], [72.0, 110.5], [76.0, 145.5], [79.0, 562.0], [80.0, 130.0], [82.0, 740.5], [81.0, 775.0], [83.0, 505.0], [87.0, 210.0], [85.0, 485.5], [84.0, 277.0], [86.0, 444.0], [90.0, 336.0], [89.0, 293.5], [88.0, 486.5], [91.0, 342.0], [92.0, 400.0], [95.0, 628.0], [94.0, 478.0], [93.0, 257.5], [98.0, 315.0], [99.0, 378.0], [96.0, 270.5], [97.0, 258.0], [102.0, 438.0], [100.0, 326.0], [101.0, 402.0], [103.0, 193.0], [104.0, 322.0], [106.0, 617.0], [107.0, 183.0], [105.0, 186.5], [108.0, 408.0], [109.0, 479.5], [110.0, 388.0], [111.0, 514.5], [114.0, 361.5], [115.0, 327.0], [113.0, 362.0], [112.0, 349.5], [119.0, 438.0], [116.0, 474.0], [118.0, 306.0], [117.0, 161.0], [122.0, 212.0], [123.0, 275.0], [121.0, 164.0], [120.0, 350.5], [124.0, 297.0], [127.0, 345.0], [125.0, 132.0], [126.0, 138.5], [128.0, 542.0], [129.0, 247.0], [131.0, 252.0], [130.0, 194.0], [138.0, 267.0], [139.0, 467.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[16.0, 766.0], [36.0, 260.5], [37.0, 227.0], [40.0, 256.0], [43.0, 346.0], [48.0, 227.0], [54.0, 266.0], [55.0, 222.0], [60.0, 342.5], [62.0, 243.0], [64.0, 274.0], [65.0, 305.0], [67.0, 240.0], [70.0, 204.5], [71.0, 240.0], [68.0, 346.0], [69.0, 282.5], [74.0, 292.0], [75.0, 220.5], [73.0, 232.5], [79.0, 292.0], [82.0, 277.0], [81.0, 320.0], [80.0, 179.0], [83.0, 232.0], [85.0, 250.5], [84.0, 244.5], [86.0, 266.0], [87.0, 229.0], [90.0, 264.5], [89.0, 242.0], [88.0, 255.5], [91.0, 260.0], [92.0, 237.0], [95.0, 268.0], [94.0, 261.0], [93.0, 242.0], [98.0, 237.0], [99.0, 258.0], [96.0, 237.0], [97.0, 231.5], [102.0, 255.5], [100.0, 255.0], [101.0, 492.5], [103.0, 223.0], [104.0, 241.0], [106.0, 271.5], [107.0, 226.5], [105.0, 292.0], [108.0, 224.0], [109.0, 233.0], [110.0, 251.0], [111.0, 256.0], [114.0, 234.0], [115.0, 235.5], [113.0, 240.0], [112.0, 227.5], [119.0, 272.5], [116.0, 281.5], [118.0, 220.0], [117.0, 237.0], [122.0, 224.0], [123.0, 240.0], [121.0, 234.5], [120.0, 219.5], [124.0, 213.0], [127.0, 228.5], [125.0, 283.0], [128.0, 231.0], [129.0, 237.5], [131.0, 224.0], [130.0, 239.0], [139.0, 252.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 139.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.36666666666666664, "minX": 1.76119524E12, "maxY": 95.91666666666667, "series": [{"data": [[1.76119548E12, 95.11666666666666], [1.7611953E12, 74.13333333333334], [1.76119542E12, 92.06666666666666], [1.76119524E12, 0.36666666666666664], [1.76119554E12, 89.45], [1.76119536E12, 95.91666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.76119554E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.35, "minX": 1.76119524E12, "maxY": 95.71666666666667, "series": [{"data": [[1.76119548E12, 94.96666666666667], [1.7611953E12, 73.48333333333333], [1.76119542E12, 91.81666666666666], [1.76119524E12, 0.35], [1.76119554E12, 90.71666666666667], [1.76119536E12, 95.71666666666667]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.76119554E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.76119524E12, "maxY": 47.766666666666666, "series": [{"data": [[1.76119548E12, 43.03333333333333], [1.7611953E12, 25.883333333333333], [1.76119542E12, 37.93333333333333], [1.76119524E12, 0.03333333333333333], [1.76119554E12, 42.46666666666667], [1.76119536E12, 37.18333333333333]], "isOverall": false, "label": "02 - Validate Invoice-success", "isController": false}, {"data": [[1.76119548E12, 4.416666666666667], [1.7611953E12, 10.533333333333333], [1.76119542E12, 8.1], [1.76119524E12, 0.08333333333333333], [1.76119554E12, 2.466666666666667], [1.76119536E12, 10.766666666666667]], "isOverall": false, "label": "02 - Validate Invoice-failure", "isController": false}, {"data": [[1.76119548E12, 47.516666666666666], [1.7611953E12, 37.06666666666667], [1.76119542E12, 45.78333333333333], [1.76119524E12, 0.23333333333333334], [1.76119554E12, 45.78333333333333], [1.76119536E12, 47.766666666666666]], "isOverall": false, "label": "01 - Login-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.76119554E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.08333333333333333, "minX": 1.76119524E12, "maxY": 90.55, "series": [{"data": [[1.76119548E12, 90.55], [1.7611953E12, 62.95], [1.76119542E12, 83.71666666666667], [1.76119524E12, 0.26666666666666666], [1.76119554E12, 88.25], [1.76119536E12, 84.95]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.76119548E12, 4.416666666666667], [1.7611953E12, 10.533333333333333], [1.76119542E12, 8.1], [1.76119524E12, 0.08333333333333333], [1.76119554E12, 2.466666666666667], [1.76119536E12, 10.766666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.76119554E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

