services:
  postgres:
    image: postgres:15-alpine
    container_name: finlab-postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-fraud_db}
      POSTGRES_USER: ${DB_USER:-frauduser}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-fraudpass123}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
      - ./database/migration:/flyway/sql
    ports:
      - "5432:5432"
    networks:
      - finlab-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-frauduser} -d ${DB_NAME:-fraud_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: finlab-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis123} --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    networks:
      - finlab-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-redis123}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  flyway:
    image: flyway/flyway:10-alpine
    container_name: finlab-flyway
    command: -connectRetries=60 migrate
    volumes:
      - ./database/migration:/flyway/sql
    environment:
      FLYWAY_URL: jdbc:postgresql://postgres:5432/${DB_NAME:-fraud_db}
      FLYWAY_USER: ${DB_USER:-frauduser}
      FLYWAY_PASSWORD: ${DB_PASSWORD:-fraudpass123}
    depends_on:
      - postgres
    networks:
      - finlab-network
    restart: on-failure

  gateway:
    build: ./gateway
    container_name: finlab-gateway
    ports:
      - "${GATEWAY_PORT:-8080}:8080"
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-docker}
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-fraud_db}
      DB_USER: ${DB_USER:-frauduser}
      DB_PASSWORD: ${DB_PASSWORD:-fraudpass123}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis123}
      JWT_SECRET: ${JWT_SECRET:-your-256-bit-secret-key-for-jwt-signing}
      API_KEY: ${API_KEY:-base64encodedapikey32bytes}
    depends_on:
      - postgres
      - redis
      - flyway
    networks:
      - finlab-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  accounts:
    build: ./accounts
    container_name: finlab-accounts
    ports:
      - "${ACCOUNTS_PORT:-8081}:8081"
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-docker}
      SERVER_PORT: 8081
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-fraud_db}
      DB_USER: ${DB_USER:-frauduser}
      DB_PASSWORD: ${DB_PASSWORD:-fraudpass123}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis123}
      API_KEY: ${API_KEY:-base64encodedapikey32bytes}
    depends_on:
      - postgres
      - redis
      - flyway
    networks:
      - finlab-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  nginx:
    build: ./nginx
    container_name: finlab-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./frontend:/usr/share/nginx/html
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - gateway
      - accounts
    networks:
      - finlab-network
    restart: unless-stopped

  jmeter:
    build: ./jmeter
    container_name: finlab-jmeter-normal
    volumes:
      - ./jmeter/test-plans:/test-plans
      - ./jmeter/test-data:/test-data
      - ./stress_tests:/results
    command: ["-n", "-t", "/test-plans/normal_load.jmx", "-l", "/results/normal_load_results/results.jtl", "-e", "-o", "/results/normal_load_results/html"]
    profiles:
      - testing
    networks:
      - finlab-network
    restart: "no"

  jmeter-extreme:
    build: ./jmeter
    container_name: finlab-jmeter-extreme
    volumes:
      - ./jmeter/test-plans:/test-plans
      - ./jmeter/test-data:/test-data
      - ./stress_tests:/results
    command: ["-n", "-t", "/test-plans/extreme_load.jmx", "-l", "/results/extreme_load_results/results.jtl", "-e", "-o", "/results/extreme_load_results/html"]
    profiles:
      - testing-extreme
    networks:
      - finlab-network
    restart: "no"

networks:
  finlab-network:
    driver: bridge

volumes:
  postgres-data:
