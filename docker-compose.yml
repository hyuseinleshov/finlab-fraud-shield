services:
  postgres:
    image: postgres:15-alpine
    container_name: finlab-postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-fraud_db}
      POSTGRES_USER: ${DB_USER:-frauduser}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-fraudpass123}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
      - ./database/migration:/flyway/sql
    networks:
      - finlab-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-frauduser} -d ${DB_NAME:-fraud_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  redis:
    image: redis:7-alpine
    container_name: finlab-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis123} --maxmemory 256mb --maxmemory-policy allkeys-lru
    networks:
      - finlab-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-redis123}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 5s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M

  flyway:
    image: flyway/flyway:10-alpine
    container_name: finlab-flyway
    command: -connectRetries=60 migrate
    volumes:
      - ./database/migration:/flyway/sql
    environment:
      FLYWAY_URL: jdbc:postgresql://postgres:5432/${DB_NAME:-fraud_db}
      FLYWAY_USER: ${DB_USER:-frauduser}
      FLYWAY_PASSWORD: ${DB_PASSWORD:-fraudpass123}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - finlab-network
    restart: "no"

  gateway:
    build:
      context: ./gateway
      dockerfile: Dockerfile
    image: finlab-fraud-shield-gateway:1.0.0
    container_name: finlab-gateway
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-docker}
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-fraud_db}
      DB_USER: ${DB_USER:-frauduser}
      DB_PASSWORD: ${DB_PASSWORD:-fraudpass123}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis123}
      JWT_SECRET: ${JWT_SECRET:-your-256-bit-secret-key-for-jwt-signing}
      API_KEY: ${API_KEY:-base64encodedapikey32bytes}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      flyway:
        condition: service_completed_successfully
    networks:
      - finlab-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1024M
        reservations:
          cpus: '0.5'
          memory: 512M
    labels:
      - "com.finlab.service=gateway"
      - "com.finlab.version=1.0.0"
      - "com.finlab.environment=production"

  accounts:
    build:
      context: ./accounts
      dockerfile: Dockerfile
    image: finlab-fraud-shield-accounts:1.0.0
    container_name: finlab-accounts
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-docker}
      SERVER_PORT: 8081
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-fraud_db}
      DB_USER: ${DB_USER:-frauduser}
      DB_PASSWORD: ${DB_PASSWORD:-fraudpass123}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis123}
      API_KEY: ${API_KEY:-base64encodedapikey32bytes}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      flyway:
        condition: service_completed_successfully
    networks:
      - finlab-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1536M
        reservations:
          cpus: '1.0'
          memory: 768M
    labels:
      - "com.finlab.service=accounts"
      - "com.finlab.version=1.0.0"
      - "com.finlab.environment=production"

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    image: finlab-fraud-shield-nginx:1.0.0
    container_name: finlab-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./frontend:/usr/share/nginx/html:ro
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      gateway:
        condition: service_healthy
      accounts:
        condition: service_healthy
    networks:
      - finlab-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.25'
          memory: 64M
    labels:
      - "com.finlab.service=nginx"
      - "com.finlab.version=1.0.0"
      - "com.finlab.environment=production"

  jmeter:
    build: ./jmeter
    image: finlab-fraud-shield-jmeter:1.0.0
    container_name: finlab-jmeter-normal
    volumes:
      - ./jmeter/test-plans:/test-plans:ro
      - ./jmeter/test-data:/test-data:ro
      - ./stress_tests:/results
    command: ["-n", "-t", "/test-plans/normal_load.jmx", "-l", "/results/normal_load_results/results.jtl", "-e", "-o", "/results/normal_load_results/html"]
    profiles:
      - testing
    depends_on:
      nginx:
        condition: service_healthy
    networks:
      - finlab-network
    restart: "no"
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1024M

  jmeter-extreme:
    build: ./jmeter
    image: finlab-fraud-shield-jmeter:1.0.0
    container_name: finlab-jmeter-extreme
    volumes:
      - ./jmeter/test-plans:/test-plans:ro
      - ./jmeter/test-data:/test-data:ro
      - ./stress_tests:/results
    command: ["-n", "-t", "/test-plans/extreme_load.jmx", "-l", "/results/extreme_load_results/results.jtl", "-e", "-o", "/results/extreme_load_results/html"]
    profiles:
      - testing-extreme
    depends_on:
      nginx:
        condition: service_healthy
    networks:
      - finlab-network
    restart: "no"
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 2048M

networks:
  finlab-network:
    driver: bridge
    labels:
      - "com.finlab.network=internal"

volumes:
  postgres-data:
    labels:
      - "com.finlab.volume=database"
